const { Permissions } = require('discord.js'),
    { e } = require('../../../JSON/emojis.json'),
    Notify = require('../../../modules/functions/plugins/notify')

module.exports = {
    name: 'setlogchannel',
    aliases: ['logs', 'setlogs', 'logchannel', 'log', 'gsn', 'notification'],
    category: 'config',
    UserPermissions: ['MANAGE_GUILD'],
    ClientPermissions: ['ADD_REACTIONS', 'VIEW_AUDIT_LOG', 'MANAGE_CHANNELS'],
    emoji: `${e.ModShield}`,
    usage: '<logs> [on/off] <#channel>',
    description: 'Canal de refer√™ncia para o sistema üõ∞Ô∏è | **Global System Notification**',

    run: async (client, message, args, prefix, MessageEmbed, Database) => {

        let channel = message.mentions.channels.first() || message.channel,
            guildData = await Database.Guild.findOne({ id: message.guild.id }, 'LogChannel'),
            atual = guildData?.LogChannel,
            ChannelAtual = message.guild.channels.cache.get(atual)

        if (atual && !ChannelAtual) {
            deleteLogs()
            return message.channel.send(`${e.Deny} | Detectei que o canal GSN presente no meu banco de dados n√£o √© compat√≠vel com nenhum canal deste servidor. Por favor, use o comando novamente.`)
        }

        if (!args[0]) return message.reply({
            embeds: [
                new MessageEmbed()
                    .setColor('#246FE0')
                    .setTitle(`üõ∞Ô∏è | Global System Notification`)
                    .setDescription('Este sistema abrange todos os meus servidores em uma checagem continua, verificando se est√° tudo bem com todos os servidores. Quaisquer altera√ß√£o que resulta na quebra de seguran√ßa do servidor, eu avisarei no canal pr√©-definido neste comando.')
                    .addField(`${e.QuestionMark} O que √© isso?`, `Este sistema √© respons√°vel por notificar as atividades do servidor em uma escala geral. Os dados fornecido de cada a√ß√£o √© processado pelo meu sistema e enviado de uma forma clara e objetiva ao canal pr√©-definido em uma forma de hist√≥rico de acontecimentos dispon√≠vel ou n√£o para todos do servidor perante o desejo da staff.`)
                    .addField(`${e.QuestionMark} O que eu envio no Sistema GSN?`, `\`Banimentos/Kicks\` Relatarei os dados do banimento/expuls√£o. Mesmo que n√£o tenha sido feito atrav√©s dos meus comandos -> \`${prefix}ban / ${prefix}kick\`\n\`Mute/Warns\` Relat√≥rio e informa√ß√µes sob o ato tamb√©m ser√£o fornecidos\n\`Autorole System\` Qualquer quebra de seguran√ßa ou mudan√ßa brusca nos cargos e erros ser√£o notificados\n\`Canais de Configura√ß√µes\` Na exclus√£o de canais com configura√ß√µes minhas ativadas, tamb√©m ser√° notificado.`)
                    .addField(`${e.QuestionMark} O que eu n√£o envio no Sistema GSN?`, `\`${prefix}welcomechannel\` - Novos Membros\n\`${prefix}leavechannel\`- Membros que sairem \nMensagens Apagadas/Editadas\nCargos/Canais editados`)
                    .addField(`${e.Gear} Comandos`, `\`${prefix}logs on/off <#channel>\` Ative/Desative o Sistema GSN\n\`${prefix}logs create\` Deixa que eu crio um canal pro Sistema GSN`)
                    .addField(`${e.Reference} Canal Atual`, ChannelAtual ? `${ChannelAtual} \`${ChannelAtual.id}\`` : 'N/A')
                    .setFooter({ text: 'Permiss√£o necess√°ria: "Ver o registro de auditoria | Adicionar rea√ß√µes | Gerenciar Canais"' })
            ]
        })

        if (['on', 'ligar', 'ativar'].includes(args[0]?.toLowerCase())) return LogsON()
        if (['off', 'desligar', 'desativar'].includes(args[0]?.toLowerCase())) return LogsOff()
        if (['create', 'criar', 'novo'].includes(args[0]?.toLowerCase())) return LogsCreate()

        return message.reply(`Comando n√£o reconhecido. Use \`${prefix}help gsn\` ou \`${prefix}gsn\` para obter mais informa√ß√µes.`)

        async function LogsON() {

            if (channel.id === atual) return message.reply(`${e.Deny} | Este canal √© o mesmo que foi configurado no meu banco de dados.`)

            let msg = await message.reply(`${e.QuestionMark} | Deseja ativar o meu sistema de GSN no servidor usando o canal ${channel}?`),
                emojis = ['‚úÖ', '‚ùå'],
                validate = false

            for (let i of emojis) msg.react(i).catch(() => { })

            const collector = msg.createReactionCollector({
                filter: (reaction, user) => emojis.includes(reaction.emoji.name) && user.id === message.author.id,
                time: 30000,
                errors: ['time']
            })

            collector.on('collect', async (reaction) => {

                if (reaction.emoji.name === emojis[0]) {

                    await Database.Guild.updateOne(
                        { id: message.guild.id },
                        { LogChannel: channel.id }
                    )

                    validate = true
                    Notify(message.guild.id, 'Recurso Ativado', `<@${message.author.id}> \`${message.author.id}\` ativou o sitema GSN no servidor.`)
                    msg.edit(`${e.Check} | Certo! Deixa o resto comigo agora.`).catch(() => { })
                }

                return collector.stop()

            })

            collector.on('end', () => {

                if (!validate) return msg.edit(`${e.Deny} | Comando cancelado.`).catch(() => { })
                return
            })

        }

        async function LogsOff() {

            if (!atual) return message.reply(`${e.Info} | O Sistema GSN j√° est√° desativado.`)

            let msg = await message.reply(`${e.QuestionMark} | Deseja desativar o sistema GSN?`),
                emojis = ['‚úÖ', '‚ùå'],
                validate = false

            for (let i of emojis) msg.react(i).catch(() => { })

            const collector = msg.createReactionCollector({
                filter: (reaction, user) => emojis.includes(reaction.emoji.name) && user.id === message.author.id,
                time: 30000,
                errors: ['time']
            })

            collector.on('collect', (reaction) => {

                if (reaction.emoji.name === emojis[0]) {

                    deleteLogs()

                    validate = true
                    msg.edit(`${e.Check} | O Sistema GSN foi desabilitado com sucesso!`).catch(() => { })
                }

                return collector.stop()

            })

            collector.on('end', () => {

                if (!validate) return msg.edit(`${e.Deny} | Comando cancelado.`).catch(() => { })
                return
            })
        }

        async function LogsCreate() {

            if (ChannelAtual) return message.reply(`${e.Info} | O canal atual do Sistema GSN √© esse aqui: ${ChannelAtual}`)

            let msg = await message.reply(`${e.QuestionMark} | Voc√™ permite que eu crie um canal novo e ative o Sistema GSN?`),
                emojis = ['‚úÖ', '‚ùå'],
                validate = false

            for (let i of emojis) msg.react(i).catch(() => { })

            const collector = msg.createReactionCollector({
                filter: (reaction, user) => emojis.includes(reaction.emoji.name) && user.id === message.author.id,
                time: 30000,
                errors: ['time']
            })

            collector.on('collect', (reaction) => {

                if (reaction.emoji.name === emojis[0]) {

                    message.guild.channels.create('log-channel', {
                        type: 'GUILD_TEXT',
                        permissionOverwrites: [
                            {
                                id: message.guild.id,
                                deny: [Permissions.FLAGS.SEND_MESSAGES],
                            },
                        ],
                    }).then(async channel => {

                        await Database.Guild.updateOne(
                            { id: message.guild.id },
                            { LogChannel: channel.id }
                        )

                        Notify(message.guild.id, 'Recurso Ativado', `<@${message.author.id}> \`${message.author.id}\` ativou o sitema GSN no servidor.`)

                    }).catch(err => {
                        return message.reply(`${e.Deny} | Ocorreu um erro ao criar o novo canal.\n\`${err}\``)
                    })

                    validate = true
                    Notify()
                    msg.edit(`${e.Check} | Prontinho!`).catch(() => { })
                }

                return collector.stop()

            })

            collector.on('end', () => {

                if (!validate) return msg.edit(`${e.Deny} | Comando cancelado.`).catch(() => { })
                return
            })

        }

        async function deleteLogs() {
            await Database.Guild.updateOne(
                { id: message.guild.id },
                { $unset: { LogChannel: 1 } }
            )
            return
        }

    }
}
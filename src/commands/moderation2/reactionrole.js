const { getEmoji, registerCollectionID } = require('../../events/plugins/eventPlugins'),
    blockPerms = ['KICK_MEMBERS', 'BAN_MEMBERS', 'MANAGE_GUILD', 'MANAGE_MESSAGES', 'MUTE_MEMBERS', 'DEAFEN_MEMBERS', 'MOVE_MEMBERS', 'MANAGE_NICKNAMES', 'MANAGE_ROLES', 'ADMINISTRATOR', 'MODERATE_MEMBERS']

module.exports = {
    name: 'reactionrole',
    aliases: ['reaction', 'rr'],
    category: 'moderation',
    ClientPermissions: ['MANAGE_ROLES', 'ADD_REACTIONS'],
    emoji: '‚öíÔ∏è',
    usage: '<reactionRole>',
    description: 'Automatize at√© 25 cargos para os membros',

    execute: async (client, message, args, prefix, MessageEmbed, Database) => {

        const { Emojis: e, Config: config } = Database

        let data = await Database.Guild.findOne({ id: message.guild.id }, 'ReactionRole'),
            ReactionRoleData = data?.ReactionRole || []

        let selectMenuPrincipal = {
            type: 1,
            components: [{
                type: 3,
                custom_id: 'createNewReactionRole',
                placeholder: 'Escolha uma op√ß√£o',
                options: [
                    {
                        label: 'Create',
                        emoji: 'üÜï',
                        description: 'Adicionar um cargo a uma cole√ß√£o',
                        value: 'newReactionRole',
                    },
                    {
                        label: 'Collection',
                        emoji: e.Database,
                        description: 'Crie uma nova cole√ß√£o de Reaction Roles',
                        value: 'newCollectionReactionRole',
                    },
                    {
                        label: 'Throw',
                        emoji: 'üì®',
                        description: 'Escolha uma cole√ß√£o para lan√ßar no chat',
                        value: 'throwReactionRole',
                    },
                    {
                        label: 'Edit',
                        emoji: 'üìù',
                        description: 'Edite um reaction role',
                        value: 'editReactionRole',
                    },
                    {
                        label: 'Delete',
                        emoji: e.Trash,
                        description: 'Delete cole√ß√µes ou cargos',
                        value: 'delete',
                    },
                    {
                        label: 'Info',
                        emoji: e.Info,
                        description: 'Informa√ß√µes do Reaction Role System',
                        value: 'info',
                    },
                    {
                        label: 'Cancelar',
                        emoji: '‚ùå',
                        description: 'Force o encerramento deste comando',
                        value: 'cancel',
                    }
                ]
            }]
        }

        if (['info', 'ajuda', 'help'].includes(args[0]?.toLowerCase())) return reactionRoleInfo()

        if (!message.member.permissions.toArray().includes('MANAGE_ROLES'))
            return message.reply(`${e.Hmmm} | Voc√™ n√£o tem permiss√£o para usar este comando.\n${e.Info} | Permiss√£o*(√µes)* necess√°ria*(s)*: **\`Gerenciar Cargos\`**`)

        return initReactionRoleCommand()

        async function throwReactionRole(collector, msg) {

            if (!ReactionRoleData || ReactionRoleData.length === 0)
                return msg.edit({
                    content: `${e.Deny} | Este servidor n√£o tem nenhuma cole√ß√£o de reaction role configurada.`,
                    embeds: []
                }).catch(() => { })

            collector.stop()

            let selectMenuObjectCollections = {
                type: 1,
                components: [{
                    type: 3,
                    custom_id: 'collections',
                    placeholder: 'Escolher uma cole√ß√£o para lan√ßamento',
                    options: []
                }]
            }, collected = false

            for (collection of ReactionRoleData) {
                selectMenuObjectCollections.components[0].options.push({
                    label: collection.name,
                    emoji: e.Database,
                    description: `Cargos na cole√ß√£o: ${collection.rolesData.length}`,
                    value: collection.collectionID || collection.name
                })
            }

            selectMenuObjectCollections.components[0].options.push({
                label: 'Cancel Throwing',
                emoji: '‚ùå',
                description: `Force o cancelamento do Throw Collection`,
                value: 'cancel'
            })

            msg.edit({
                content: `${e.Loading} | Qual cole√ß√£o voc√™ quer lan√ßar?`,
                embeds: [],
                components: [selectMenuObjectCollections]
            }).catch(() => { })

            collector = msg.createMessageComponentCollector({
                filter: int => int.user.id === message.author.id,
                idle: 60000,
            })
                .on('collect', async interaction => {

                    const { values } = interaction,
                        value = values[0]

                    if (value === 'cancel') return collector.stop()

                    interaction.deferUpdate().catch(() => { })

                    let collection = ReactionRoleData.find(coll => coll.collectionID === value || coll.name === value)

                    if (!collection)
                        return msg.edit({
                            content: `${e.Deny} | Cole√ß√£o n√£o encontrada.`
                        }).catch(() => { })

                    collected = true
                    collector.stop()
                    return selectRolesInCollection(collection)
                })
                .on('end', () => {
                    if (collected) return
                    return msg.edit({
                        content: `${e.Deny} | Lan√ßamento cancelado.`,
                        embeds: [], components: []
                    }).catch(() => { })
                })

            async function selectRolesInCollection(collection) {

                let selectMenuObject = {
                    type: 1,
                    components: [{
                        type: 3,
                        custom_id: 'reactionRole',
                        placeholder: `Escolher cargos da cole√ß√£o ${collection.name}`,
                        options: []
                    }]
                }

                if (!collection.uniqueSelection)
                    selectMenuObject.components[0].minValues = 1

                if (collection.rolesData.length > 0)
                    for (let data of collection.rolesData) {
                        let objData = { label: data.title, value: data.roleId }

                        if (data.emoji)
                            objData.emoji = data.emoji

                        if (data.description)
                            objData.description = data.description

                        selectMenuObject.components[0].options.push(objData)
                    }

                let collectionID = collection.collectionID || await registerCollectionID(Database, collection, message.guild)

                selectMenuObject.components[0].options.push({
                    label: 'Refresh',
                    emoji: 'üîÑ',
                    description: 'Atualize o reaction role',
                    value: `refreshReactionRole ${collectionID}`
                })

                msg.edit({
                    content: `${e.Check} | Lan√ßamento efetuado.`,
                    embeds: [],
                    components: []
                }).catch(() => { })

                let embed = { color: client.blue, title: collection.embedTitle || `Cargos da Cole√ß√£o ${collection.name}` }

                let mapResult = collection.rolesData.map(data => `${getEmoji(data.emoji, message.guild)}${message.guild.roles.cache.get(data.roleId) || 'Not Found'}` || '\`Cargo n√£o encontrado\`').join('\n')

                embed.description = mapResult || '> *Esta cole√ß√£o n√£o possui nenhum cargo*'

                return message.channel.send({ components: [selectMenuObject], embeds: [embed] })
                    .then(() => {
                        return msg.edit({
                            content: `${e.Check} | Lan√ßamento efetuado com sucesso!`,
                            embeds: [],
                            components: []
                        }).catch(() => { })
                    })
                    .catch(err => {
                        return msg.edit({
                            content: `${e.Deny} | Erro ao efetuar o lan√ßamento.\n> \`${err}\``,
                            embeds: [],
                            components: []
                        }).catch(() => { })
                    })
            }

        }

        async function deleteReactionRole(msg) {

            if (!ReactionRoleData || ReactionRoleData.length === 0)
                return msg.edit({
                    content: `${e.Deny} | Este servidor n√£o tem nenhuma cole√ß√£o de reaction roles.`,
                    embeds: [], components: []
                }).catch(() => { })

            let buttons = [
                {
                    type: 1,
                    components: [
                        {
                            type: 2,
                            label: 'Uma cole√ß√£o',
                            custom_id: 'collection',
                            emoji: e.Database,
                            style: 'PRIMARY'
                        },
                        {
                            type: 2,
                            label: 'Um cargo',
                            custom_id: 'role',
                            emoji: 'üí†',
                            style: 'PRIMARY'
                        },
                        {
                            type: 2,
                            label: 'Tudo',
                            custom_id: 'all',
                            emoji: e.Trash,
                            style: 'PRIMARY'
                        },
                        {
                            type: 2,
                            label: 'Cancelar',
                            custom_id: 'cancel',
                            emoji: '‚ùé',
                            style: 'DANGER'
                        },
                    ]
                }
            ], collected = false

            msg.edit({
                content: `${e.Loading} | Eai, vai querer deletar o que?`,
                embeds: [],
                components: buttons
            }).catch(() => { }), collected = false

            let collector = msg.createMessageComponentCollector({
                filter: int => int.user.id === message.author.id,
                time: 60000
            })
                .on('collect', interaction => {

                    const { customId } = interaction

                    if (customId === 'cancel') return collector.stop()
                    interaction.deferUpdate().catch(() => { })

                    collected = true
                    collector.stop()
                    switch (customId) {
                        case 'collection': chooseACollectionToDelete(); break;
                        case 'role': deleteRole(); break;
                        case 'all': deleteAll(); break;

                        default: msg.edit({
                            content: `${e.Deny} | Comando n√£o reconhecido.`,
                            embeds: [],
                            components: []
                        }).catch(() => { });
                            break;
                    }

                })
                .on('end', () => {
                    if (collected) return
                    return msg.edit({
                        content: `${e.Deny} | Comando cancelado.`,
                        embeds: [],
                        components: []
                    }).catch(() => { })
                })

            async function deleteAll() {

                let buttonsDelete = [
                    {
                        type: 1,
                        components: [
                            {
                                type: 2,
                                label: 'SIM',
                                custom_id: 'yes',
                                style: 'SUCCESS'
                            },
                            {
                                type: 2,
                                label: 'N√ÉO',
                                custom_id: 'no',
                                style: 'DANGER'
                            }
                        ]
                    }
                ], collected = false

                msg = await msg.edit({
                    content: `${e.QuestionMark} | Voc√™ tem certeza em desativar todo o sistema de reaction role do servidor?`,
                    components: buttonsDelete
                }).catch(() => { })

                let collector = msg.createMessageComponentCollector({
                    filter: int => int.user.id === message.author.id,
                    time: 60000,
                    errors: ['time', 'max']
                })
                    .on('collect', interaction => {
                        interaction.deferUpdate().catch(() => { })

                        const { customId } = interaction

                        if (customId === 'no') return collector.stop()

                        collected = true
                        return deleteAllData()

                    })
                    .on('end', () => {
                        if (collected) return
                        return msg.edit({
                            content: `${e.Deny} | Exclus√£o cancelada.`,
                            components: []
                        }).catch(() => { })
                    })

                async function deleteAllData() {

                    await Database.Guild.updateOne(
                        { id: message.guild.id },
                        {
                            $unset: { ReactionRole: 1 }
                        }
                    )

                    return msg.edit({
                        content: `${e.Check} | Todo o sistema de reaction role foi deletado com sucesso! Por favor, clique em "Refresh" em todos os reactions roles ativados neste servidor. *(se tiver algum)*`,
                        components: []
                    }).catch(() => { })
                }

                return
            }

            async function deleteRole() {

                let selectMenuObject = {
                    type: 1,
                    components: [{
                        type: 3,
                        custom_id: 'menu',
                        placeholder: 'Escolher uma cole√ß√£o',
                        options: []
                    }]
                }, collected = false

                for (let collection of ReactionRoleData)
                    selectMenuObject.components[0].options.push({
                        label: collection.name,
                        emoji: e.Database,
                        description: `Esta cole√ß√£o possui ${collection.rolesData.length} cargos`,
                        value: collection.name
                    })

                selectMenuObject.components[0].options.push({
                    label: 'Cancelar',
                    emoji: e.Deny,
                    description: `Cancelar a exclus√£o de cargos`,
                    value: 'cancel'
                })

                msg = await msg.edit({
                    content: `${e.QuestionMark} | De qual cole√ß√£o √© o cargo que voc√™ quer deletar?`,
                    embeds: [],
                    components: [selectMenuObject]
                }).catch(() => { })

                let collector = msg.createMessageComponentCollector({
                    filter: int => int.user.id === message.author.id,
                    time: 60000
                })
                    .on('collect', interaction => {

                        const { values } = interaction,
                            value = values[0]

                        if (value === 'cancel') return collector.stop()
                        interaction.deferUpdate().catch(() => { })

                        let collection = ReactionRoleData.find(d => d.name === value)

                        if (!collection)
                            return msg.edit({ content: `${e.Deny} | Cole√ß√£o n√£o encontrada.` }).catch(() => { })

                        collected = true
                        collector.stop()
                        return deleteRoleFromCollection(collection)

                    })
                    .on('end', () => {
                        if (collected) return
                        return msg.edit({
                            content: `${e.Deny} | Exclus√£o de cole√ß√£o cancelada.`,
                            embeds: [],
                            components: []
                        }).catch(() => { })
                    })

                async function deleteRoleFromCollection(collection) {

                    let selectMenuObject = {
                        type: 1,
                        components: [{
                            type: 3,
                            maxValues: 1,
                            custom_id: 'toDelete',
                            placeholder: 'Escolher um cargo para deletar',
                            options: []
                        }]
                    }, collected = false

                    for (let data of collection.rolesData) {

                        let objData = { label: data.title, value: data.roleId }

                        if (data.emoji)
                            objData.emoji = data.emoji

                        if (data.description)
                            objData.description = data.description

                        selectMenuObject.components[0].options.push(objData)
                    }

                    selectMenuObject.components[0].options.push({
                        label: 'Cancelar',
                        emoji: e.Deny,
                        description: 'Cancelar exclus√£o',
                        value: 'cancel'
                    })

                    msg.edit({
                        content: `${e.QuestionMark} | Qual cargo voc√™ deseja deletar?`,
                        emebds: [], components: [selectMenuObject]
                    }).catch(() => { })

                    let collector = msg.createMessageComponentCollector({
                        filter: int => int.user.id === message.author.id,
                        time: 60000
                    })
                        .on('collect', interaction => {

                            const { values } = interaction,
                                value = values[0]

                            if (value === 'cancel') return collector.stop()
                            interaction.deferUpdate().catch(() => { })

                            collected = true

                            if (!collection.rolesData.find(r => r.roleId === value))
                                return msg.edit({ content: `${e.Deny} | Cargo n√£o encontrado nesta cole√ß√£o.` }).catch(() => { })

                            collector.stop()
                            return deleteRoleFromCollectionX(collection, value)
                        })
                        .on('end', () => {
                            if (collected) return
                            return msg.edit({
                                content: `${e.Deny} | Exclus√£o de cargo cancelado.`,
                                embeds: [], components: []
                            }).catch(() => { })
                        })
                }

                async function deleteRoleFromCollectionX(collection, roleId) {

                    await Database.Guild.updateOne(
                        { id: message.guild.id, ['ReactionRole.name']: collection.name },
                        { $pull: { [`ReactionRole.$.rolesData`]: { roleId: roleId } } }
                    )

                    let role = message.guild.roles.cache.get(roleId) || '`Not Found`'
                    return msg.edit({
                        content: `${e.Check} | O cargo ${role} - \`${roleId}\` foi deletado com sucesso da cole√ß√£o **${collection.name}**. Possuindo assim, ${collection.rolesData.length - 1} ${(collection.rolesData.length - 1) === 1 ? 'cargo dispon√≠vel' : 'cargos dispon√≠veis'}.`,
                        embeds: [], components: []
                    }).catch(() => { })
                }

            }

            async function chooseACollectionToDelete() {

                let selectMenuObject = {
                    type: 1,
                    components: [{
                        type: 3,
                        custom_id: 'menu',
                        placeholder: 'Escolher uma cole√ß√£o',
                        options: []
                    }]
                }, collected = false

                for (let collection of ReactionRoleData)
                    selectMenuObject.components[0].options.push({
                        label: collection.name,
                        emoji: e.Database,
                        description: `Esta cole√ß√£o possui ${collection.rolesData.length} cargos`,
                        value: collection.name
                    })

                selectMenuObject.components[0].options.push({
                    label: 'Cancelar',
                    emoji: e.Deny,
                    description: `Cancela a exclus√£o de cole√ß√£o`,
                    value: 'cancel'
                })

                msg = await msg.edit({
                    content: `${e.QuestionMark} | Qual cole√ß√£o voc√™ deseja deletar?`,
                    embeds: [],
                    components: [selectMenuObject]
                }).catch(() => { })

                let collector = msg.createMessageComponentCollector({
                    filter: int => int.user.id === message.author.id,
                    time: 60000
                })
                    .on('collect', interaction => {

                        const { values } = interaction,
                            value = values[0]

                        if (value === 'cancel') return collector.stop()
                        interaction.deferUpdate().catch(() => { })

                        let collection = ReactionRoleData.find(d => d.name === value)

                        if (!collection)
                            return msg.edit({ content: `${e.Deny} | Cole√ß√£o n√£o encontrada.` }).catch(() => { })

                        collected = true
                        collector.stop()
                        return deleteCollectionConfimation(collection)

                    })
                    .on('end', () => {
                        if (collected) return
                        return msg.edit({
                            content: `${e.Deny} | Exclus√£o de cole√ß√£o cancelada.`,
                            embeds: [],
                            components: []
                        }).catch(() => { })
                    })

                async function deleteCollectionConfimation(collection) {

                    msg.edit({
                        content: `${e.QuestionMark} | Voc√™ realmente deseja deletar a cole√ß√£o **${collection.name}** do sistema de Reaction Roles?`,
                        emebds: [], components: []
                    }).catch(() => { })

                    let emojis = ['‚úÖ', '‚ùå'], coll = false

                    for (let i of emojis) msg.react(i).catch(() => { })

                    return msg.createReactionCollector({
                        filter: (r, u) => emojis.includes(r.emoji.name) && u.id === message.author.id,
                        time: 60000,
                        max: 1,
                        errors: ['max', 'time']
                    })
                        .on('collect', (reaction) => {

                            const { emoji } = reaction

                            if (emoji.name === emojis[1]) return

                            coll = true
                            return deleteCollection(collection.name)
                        })
                        .on('end', () => {
                            if (coll) return
                            return msg.edit({
                                content: `${e.Deny} | Comando de exclus√£o cancelado.`
                            }).catch(() => { })
                        })
                }

                async function deleteCollection(collectionName) {

                    await Database.Guild.findOneAndUpdate(
                        { id: message.guild.id },
                        { $pull: { ReactionRole: { name: collectionName } } }
                    )

                    return msg.edit({ content: `${e.Check} | A cole√ß√£o **${collectionName}** foi deletada com sucesso!` }).catch(() => { })
                }

            }
        }

        async function editReactionRole(msg) {

            let data = await Database.Guild.findOne({ id: message.guild.id }, 'ReactionRole'),
                reactionData = data?.ReactionRole || []

            if (!data || !reactionData || reactionData.length === 0)
                return msg.edit({
                    content: `${e.Deny} | Este servidor n√£o possui nenhuma cole√ß√£o criada. Portanto, a fun√ß√£o *edit* est√° bloqueada.`,
                    components: [], embeds: []
                }).catch(() => { })

            let buttons = [{
                type: 1,
                components: [
                    {
                        type: 2,
                        label: 'Uma Cole√ß√£o',
                        emoji: e.Database,
                        custom_id: 'collection',
                        style: 'PRIMARY'
                    },
                    {
                        type: 2,
                        label: 'Um Cargo',
                        emoji: 'üí†',
                        custom_id: 'role',
                        style: 'PRIMARY'
                    },
                    {
                        type: 2,
                        label: 'Cancelar',
                        emoji: '‚ùå',
                        custom_id: 'cancel',
                        style: 'DANGER'
                    }
                ]
            }], collected = false

            msg.edit({
                content: `${e.Loading} | Ok, editar. O que voc√™ quer editar?`,
                embeds: [],
                components: buttons
            }).catch(() => { })

            let collector = msg.createMessageComponentCollector({
                filter: int => int.user.id === message.author.id,
                time: 60000,
                errors: ['time']
            })
                .on('collect', interaction => {

                    const { customId } = interaction

                    if (customId === 'cancel') return collector.stop()

                    collected = true
                    collector.stop()

                    interaction.deferUpdate().catch(() => { })
                    if (customId === 'collection') return chooseCollectionToEdit()
                    if (customId === 'role') return chooseCollectionToEditRole()
                    return
                })
                .on('end', () => {
                    if (collected) return
                    return msg.edit({
                        content: `${e.Deny} | Edi√ß√£o cancelada.`,
                        components: []
                    }).catch(() => { })
                })

            return

            async function chooseCollectionToEdit() {

                let selectMenu = await buildSelectMenu(), collected = false

                msg.edit({
                    content: `${e.QuestionMark} | Qual cole√ß√£o voc√™ quer editar?`,
                    components: [selectMenu]
                }).catch(() => { })

                let collector = msg.createMessageComponentCollector({
                    filter: int => int.user.id === message.author.id,
                    time: 60000,
                    errors: ['time']
                })
                    .on('collect', interaction => {

                        const { values } = interaction,
                            value = values[0]

                        if (value === 'cancel') return collector.stop()

                        collected = true
                        collector.stop()

                        if (ReactionRoleData.find(d => d.collectionID === value))
                            return msg.edit({
                                content: `${e.Check} | Request aceita!`, components: [], embeds: []
                            }).catch(() => { })

                        return msg.edit({
                            content: `${e.Deny} | Nenhuma cole√ß√£o foi encontrada. \`Collection ID: ${value}\``, components: [], embeds: []
                        }).catch(() => { })
                    })
                    .on('end', () => {
                        if (collected) return
                        return msg.edit({
                            content: `${e.Deny} | Edi√ß√£o de cole√ß√£o cancelada.`,
                            components: []
                        }).catch(() => { })
                    })

                async function buildSelectMenu() {

                    let selectMenuObject = {
                        type: 1,
                        components: [{
                            type: 3,
                            custom_id: 'collectionEdit',
                            placeholder: 'Cole√ß√µes',
                            options: []
                        }]
                    }

                    for (let collection of reactionData)
                        selectMenuObject.components[0].options.push({
                            label: collection.name,
                            emoji: e.Database,
                            description: `${collection.rolesData.length} Cargos | Rea√ß√£o √∫nica: ${collection.uniqueSelection ? 'Sim' : 'N√£o'}`,
                            value: collection.collectionID || await registerCollectionID(Database, collection, message.guild)
                        })

                    selectMenuObject.components[0].options.push({
                        label: 'Cancelar',
                        emoji: '‚ùå',
                        description: 'Cancelar edi√ß√£o',
                        value: 'cancel'
                    })

                    return selectMenuObject
                }

                return
            }

            async function chooseCollectionToEditRole() {

                let selectMenu = {
                    type: 1,
                    components: [{
                        type: 3,
                        custom_id: 'editARole',
                        placeholder: 'Escolher cole√ß√£o do cargo',
                        options: []
                    }]
                }, collected = false

                for (let collection of ReactionRoleData)
                    selectMenu.components[0].options.push({
                        label: collection.name,
                        emoji: e.Database,
                        description: `Esta cole√ß√£o possui ${collection.rolesData.length} cargos`,
                        value: collection.name
                    })

                selectMenu.components[0].options.push({
                    label: 'Cancelar',
                    emoji: e.Deny,
                    description: 'Cancelar a exclus√£o de cargos',
                    value: 'cancel'
                })

                msg.edit({
                    content: `${e.QuestionMark} | Em qual cole√ß√£o o cargo que voc√™ quer editar est√°?`,
                    components: [selectMenu]
                }).catch(() => { })

                return msg.createMessageComponentCollector({
                    filter: int => int.user.id === message.author.id,
                    time: 60000,
                    max: 1,
                    errors: ['time']
                })
                    .on('collect', interaction => {

                        const { values } = interaction,
                            value = values[0]

                        if (value === 'cancel') return

                        collected = true
                        interaction.deferUpdate().catch(() => { })

                        let collection = ReactionRoleData.find(d => d.name === value)

                        if (!collection)
                            return msg.edit({
                                content: `${e.Deny} | Esta cole√ß√£o √© estranha... Eu n√£o achei ela.`,
                                components: []
                            }).catch(() => { })

                        return editRole(collection)

                    })
                    .on('end', () => {
                        if (collected) return
                        return msg.edit({ content: `${e.Deny} | Edi√ß√£o de cargo cancelada.`, components: [] }).catch(() => { })
                    })

                async function editRole(collection) {

                    let selectMenuObject = {
                        type: 1,
                        components: [{
                            type: 3,
                            maxValues: 1,
                            custom_id: 'toEdit',
                            placeholder: 'Escolher um cargo para editar',
                            options: []
                        }]
                    }, collected = false

                    for (let data of collection.rolesData) {

                        let objData = { label: data.title, value: data.roleId }

                        if (data.emoji)
                            objData.emoji = data.emoji

                        if (data.description)
                            objData.description = data.description

                        selectMenuObject.components[0].options.push(objData)
                    }

                    selectMenuObject.components[0].options.push({
                        label: 'Cancelar',
                        emoji: e.Deny,
                        description: 'Cancelar edi√ß√£o',
                        value: 'cancel'
                    })

                    msg.edit({
                        content: `${e.QuestionMark} | Qual cargo voc√™ deseja editar?`,
                        emebds: [], components: [selectMenuObject]
                    }).catch(() => { })

                    let collector = msg.createMessageComponentCollector({
                        filter: int => int.user.id === message.author.id,
                        time: 60000
                    })
                        .on('collect', interaction => {

                            const { values } = interaction,
                                value = values[0]

                            if (value === 'cancel') return collector.stop()

                            collected = true

                            if (!collection.rolesData.find(r => r.roleId === value))
                                return msg.edit({ content: `${e.Deny} | Cargo n√£o encontrado nesta cole√ß√£o.`, components: [] }).catch(() => { })

                            collector.stop()
                            return msg.edit({ content: `${e.Check} | Solicita√ß√£o aceita.`, components: [] }).catch(() => { })
                        })
                        .on('end', () => {
                            if (collected) return
                            return msg.edit({
                                content: `${e.Deny} | Edi√ß√£o de cargo cancelado.`,
                                embeds: [], components: []
                            }).catch(() => { })
                        })
                    return
                }

            }

        }

        async function reactionRoleInfo(msg) {

            let infoSelectMenu = {
                type: 1,
                components: [{
                    type: 3,
                    custom_id: 'infoSelectMenu',
                    placeholder: 'Tipos de informa√ß√µes',
                    options: [
                        {
                            label: 'What is this?',
                            emoji: e.QuestionMark,
                            description: 'Afinal, o que √© Reaction Role?',
                            value: 'whatIsThis',
                        },
                        {
                            label: 'Create',
                            emoji: 'üÜï',
                            description: 'Como fa√ßo isso? D√° um help!',
                            value: 'create',
                        },
                        {
                            label: 'Collection',
                            emoji: e.Database,
                            description: 'Cole√ß√£o? O que √© isso?',
                            value: 'collection',
                        },
                        {
                            label: 'Throw',
                            emoji: 'üì®',
                            description: 'O que caralhos √© Throw?',
                            value: 'throw',
                        },
                        {
                            label: 'Edit',
                            emoji: 'üìù',
                            description: 'Quero editar, como fa√ßo isso?',
                            value: 'edit',
                        },
                        {
                            label: 'Delete',
                            emoji: e.Trash,
                            description: 'Quero deletar! Socorro!',
                            value: 'delete',
                        },
                        {
                            label: 'Security',
                            emoji: e.ModShield,
                            description: 'Relaxa que a Saph protege.',
                            value: 'security',
                        },
                        {
                            label: 'Cancel',
                            emoji: '‚ùå',
                            description: 'Deixa pra l√°. Cancela tudo.',
                            value: 'cancel',
                        }
                    ]
                }]
            }

            if (message.member.permissions.toArray().includes('MANAGE_ROLES'))
                infoSelectMenu.components[0].options.push({
                    label: 'Beginning',
                    emoji: 'üîÑ',
                    description: 'Espera. Volta tudo do come√ßo.',
                    value: 'beginning',
                })

            msg = msg ?
                await msg.edit({
                    content: `${e.QuestionMark} | Qual tipo de informa√ß√£o sobre o reaction role voc√™ quer?`,
                    components: [infoSelectMenu]
                }).catch(() => { })
                : await message.reply({
                    content: `${e.QuestionMark} | Qual tipo de informa√ß√£o sobre o reaction role voc√™ quer?`,
                    components: [infoSelectMenu]
                }).catch(() => { })

            let collector = msg.createMessageComponentCollector({
                filter: int => int.user.id === message.author.id && int.customId === 'infoSelectMenu',
                idle: 120000,
                errors: ['idle']
            })
                .on('collect', interaction => {

                    const { values } = interaction,
                        value = values[0],
                        embed = { color: client.blue, title: `${e.Stonks} ${client.user.username}'s Reaction Role Interative Information` }

                    if (value === 'cancel') return collector.stop()
                    if (value === 'beginning') {
                        msg.delete().catch(() => { })
                        return initReactionRoleCommand()
                    }

                    interaction.deferUpdate().catch(() => { })

                    switch (value) {
                        case 'whatIsThis':
                            embed.description = `> Reaction Role √© um termo criado pelos desenvolvedores de bot para um sistema de entrega de cargos autom√°tico para membros do servidor atr√°ves de cliques em emojis. Voc√™ reage a um emoji e o bot te entrega o cargo configurado para aquele emoji. Por isso o nome, "Reaction Role -> Cargo por Rea√ß√£o".\n \n${e.SaphireOk} Por√©m, aqui n√£o tem nada de emojis. Voc√™ ganha seus cargos atr√°ves de intera√ß√µes, selecionando o cargo ou os cargos que voc√™ quer por meio da barrinha de sele√ß√£o.`
                            embed.image = { url: 'https://media.discordapp.net/attachments/893361065084198954/984256307378929704/unknown.png' }
                            break;
                        case 'create':
                            embed.description = 'Voc√™ cria um cargo clicando na op√ß√£o **"üÜï Create"**. Ap√≥s a sele√ß√£o, ir√° aparecer o painel abaixo para voc√™.'
                            embed.fields = [
                                {
                                    name: 'üìù *ID OU NOME EXATO DO CARGO (1 - 100 Caracteres)',
                                    value: `Neste campo, voc√™ escreve o ID ou o nome cargo que voc√™ quer adicionar ao reaction role.\n*Se voc√™ n√£o sabe pegar o ID das coisas, veja este [artigo do Discord](${'https://support.discord.com/hc/pt-br/articles/206346498-Onde-posso-encontrar-minhas-IDs-de-Usu%C3%A1rio-Servidor-Mensagem-'}).*`
                                },
                                {
                                    name: 'üìù *T√çTULO PARA O CARGO (1 - 25 Caracteres)',
                                    value: 'Este √© o t√≠tulo do seu cargo dentro da sele√ß√£o de cargos. O que voc√™ colocar neste campo, √© como eu apresentarei o cargo para todo mundo.'
                                },
                                {
                                    name: 'üìù DESCRI√á√ÉO DA REACTION ROLE (1 - 50 Caracteres)',
                                    value: 'Fale em poucas palavras para o que √© o cargo, para que os demais saibam o motivo para o cargo estar dispon√≠vel.'
                                },
                            ]
                            embed.footer = { text: '* Campos obrigat√≥rios ' }
                            embed.image = { url: 'https://media.discordapp.net/attachments/893361065084198954/984257986908262450/unknown.png' }
                            break;
                        case 'collection':
                            embed.description = `As cole√ß√µes s√£o um tipo de "caixinha" onde voc√™ coloca os cargos para os outros pegarem. As cole√ß√µes est√£o limitas em **24 por servidor** e cada cole√ß√£o suporta um total de **24 cargos**, totalizando, **576 cargos** poss√≠veis no reaction role. No Discord, o limite √© de 250 cargos dentro do servidor, logo, voc√™ pode colocar todos os cargos dentro do meu sistema que ainda vai sobrar muito espa√ßo ${e.SaphireOk}\n \nJ√° ia esquecendo. Na cria√ß√£o da sua cole√ß√£o, voc√™ tamb√©m pode escolher se eu posso ou n√£o entregar v√°rios cargos de uma s√≥ vez.`
                            embed.image = { url: 'https://media.discordapp.net/attachments/893361065084198954/984264241064345650/unknown.png' }
                            break;
                        case 'throw':
                            embed.description = 'A fun√ß√£o **üì® Throw** n√£o √© nada mais que pegar uma das suas cole√ß√µes criadas e lan√ßar no chat.\nThrow, vem do ingl√™s "lan√ßar". E com essa op√ß√£o fica simples e f√°cil de ativar de vez o seu reaction role. Legal, n√©?\nClique no throw e escolha a sua cole√ß√£o. Se n√£o tiver nenhuma, crie a sua.'
                            embed.image = { url: 'https://media.discordapp.net/attachments/893361065084198954/984266928090664981/unknown.png' }
                            break;
                        case 'edit':
                            embed.description = 'A fun√ß√£o **üìù Edit** permite voc√™ editar as informa√ß√µes j√° criadas. Dando total liberdade para alterar o *Nome, T√≠tulo, Descri√ß√£o e Mult-Cargos* das cole√ß√µes e *Nome, Emoji, Descri√ß√£o e Cole√ß√£o* dos cargos.'
                            embed.image = { url: 'https://media.discordapp.net/attachments/893361065084198954/984268001320787988/unknown.png' }
                            break;
                        case 'delete':
                            embed.description = 'Esse aqui √© t√£o simples que nem precisa de ajuda. Voc√™ apenas escolhe o que quer ser deletado. Uma cole√ß√£o ou um cargo.'
                            embed.image = { url: 'https://media.discordapp.net/attachments/893361065084198954/984273312832184330/unknown.png' }
                            break;
                        case 'security':
                            embed.description = 'Desde a cria√ß√£o at√© a adi√ß√£o do cargo no membro. Todos os passos s√£o analisados e checados pelos meus sistemas de segura√ßa de cargos impedindo que algo de errado aconte√ßa.'
                            embed.fields = [
                                {
                                    name: `${e.Reference} Permiss√µes Negadas`,
                                    value: `${blockPerms.map(perm => `\`${config.Perms[perm]}\``).join(', ')}`
                                }
                            ]
                            break;
                        default:
                            embed.description = 'Nenhum dado foi reconhecido.'
                            break;
                    }

                    return msg.edit({ embeds: [embed] }).catch(() => { })
                })
                .on('end', () => {
                    return msg.edit({
                        content: `${e.Deny} | O painel interativo do reaction role foi desativado.`,
                        embeds: [], components: []
                    })
                })

        }

        async function initReactionRoleCommand() {

            let msg = await message.reply({
                content: `${e.QuestionMark} | Eai! O que quer pra hoje?`,
                embeds: [{
                    color: client.blue,
                    title: `${e.Stonks} ${client.user.username}'s Reaction Role System`,
                    description: `> Em caso de alguma d√∫vida, use a fun√ß√£o "${e.Info} Info".`,
                    fields: [{
                        name: `${e.Reference} Security`,
                        value: `As permiss√µes a seguir n√£o s√£o aceitas neste sistema.\n> ${blockPerms.map(perm => `\`${config.Perms[perm]}\``).join(', ')}`
                    }]
                }],
                components: [selectMenuPrincipal]
            }), collected = false

            let collector = msg.createMessageComponentCollector({
                filter: int => int.user.id === message.author.id,
                time: 180000
            })
                .on('collect', interaction => {

                    const { values, customId } = interaction,
                        value = values[0]

                    if (customId !== 'createNewReactionRole') return

                    if (['newReactionRole', 'newCollectionReactionRole'].includes(value)) {
                        collected = true
                        collector.stop()
                        return msg.edit({
                            content: `${e.Check} | Request aceita!`,
                            embeds: [],
                            components: []
                        }).catch(() => { })
                    }

                    interaction.deferUpdate().catch(() => { })

                    if (value === 'editReactionRole') {
                        collected = true
                        collector.stop()
                        return editReactionRole(msg)
                    }

                    if (value === 'info') {
                        collected = true
                        collector.stop()
                        return reactionRoleInfo(msg)
                    }

                    if (value === 'delete') {
                        collected = true
                        collector.stop()
                        return deleteReactionRole(msg)
                    }
                    if (value === 'cancel') return collector.stop()
                    if (value === 'throwReactionRole') {
                        collected = true
                        return throwReactionRole(collector, msg)
                    }

                    return
                })
                .on('end', () => {
                    if (collected) return collected = false
                    return msg.edit({
                        content: `${e.Deny} | Comando encerrado.`,
                        embeds: [],
                        components: []
                    }).catch(() => { })
                })

        }
    }
}